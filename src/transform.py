import pandas as pd
from pathlib import Path

def transform_data_types(input_file='data.csv', output_file='data_processed.parquet'):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if not Path(input_file).exists():
            print(f"‚ùå Input file {input_file} not found!")
            return None
            
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        print(f"Reading data from {input_file}...")
        raw_data = pd.read_csv(input_file)
        df = raw_data.copy()
        
        print(f"üìä Original data shape: {df.shape}")
        
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        categorical_columns = ['Description', 'Name', 'iso_code']
        for col in categorical_columns:
            if col in df.columns:
                df[col] = df[col].astype('category')
                print(f"‚úÖ Converted to categorical: {col}")
        
        # –ß–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        numeric_columns = [
            'year', 'population', 'gdp', 'cement_co2', 'cement_co2_per_capita', 
            'co2', 'co2_growth_abs', 'co2_growth_prct', 'co2_including_luc',
            'co2_including_luc_growth_abs', 'co2_including_luc_growth_prct',
            'co2_including_luc_per_capita', 'co2_including_luc_per_gdp',
            'co2_including_luc_per_unit_energy', 'co2_per_capita', 'co2_per_gdp',
            'co2_per_unit_energy', 'coal_co2', 'coal_co2_per_capita',
            'consumption_co2', 'consumption_co2_per_capita', 'consumption_co2_per_gdp',
            'cumulative_cement_co2', 'cumulative_co2', 'cumulative_co2_including_luc',
            'cumulative_coal_co2', 'cumulative_flaring_co2', 'cumulative_gas_co2',
            'cumulative_luc_co2', 'cumulative_oil_co2', 'cumulative_other_co2',
            'energy_per_capita', 'energy_per_gdp', 'flaring_co2', 'flaring_co2_per_capita',
            'gas_co2', 'gas_co2_per_capita', 'ghg_excluding_lucf_per_capita',
            'ghg_per_capita', 'land_use_change_co2', 'land_use_change_co2_per_capita',
            'methane', 'methane_per_capita', 'nitrous_oxide', 'nitrous_oxide_per_capita',
            'oil_co2', 'oil_co2_per_capita', 'other_co2_per_capita', 'other_industry_co2',
            'primary_energy_consumption', 'share_global_cement_co2', 'share_global_co2',
            'share_global_co2_including_luc', 'share_global_coal_co2',
            'share_global_cumulative_cement_co2', 'share_global_cumulative_co2',
            'share_global_cumulative_co2_including_luc', 'share_global_cumulative_coal_co2',
            'share_global_cumulative_flaring_co2', 'share_global_cumulative_gas_co2',
            'share_global_cumulative_luc_co2', 'share_global_cumulative_oil_co2',
            'share_global_cumulative_other_co2', 'share_global_flaring_co2',
            'share_global_gas_co2', 'share_global_luc_co2', 'share_global_oil_co2',
            'share_global_other_co2', 'share_of_temperature_change_from_ghg',
            'temperature_change_from_ch4', 'temperature_change_from_co2',
            'temperature_change_from_ghg', 'temperature_change_from_n2o',
            'total_ghg', 'total_ghg_excluding_lucf', 'trade_co2', 'trade_co2_share'
        ]
        
        for col in numeric_columns:
            if col in df.columns:
                original_null_count = df[col].isnull().sum()
                df[col] = pd.to_numeric(df[col], errors='coerce')
                new_null_count = df[col].isnull().sum()
                if new_null_count > original_null_count:
                    print(f"üî¢ Converted to numeric: {col} (+{new_null_count - original_null_count} nulls)")
        
        # –ì–æ–¥ –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        if 'year' in df.columns:
            df['year'] = pd.to_numeric(df['year'], errors='coerce').fillna(0).astype('int64')
            print("‚úÖ Converted: year -> int64")
        
        # –ù–∞—Å–µ–ª–µ–Ω–∏–µ –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        if 'population' in df.columns:
            df['population'] = pd.to_numeric(df['population'], errors='coerce').fillna(0).astype('int64')
            print("‚úÖ Converted: population -> int64")
        
        print("\n" + "="*50)
        print("üìã Data types after transformation:")
        print(df.dtypes)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            if output_file.endswith('.parquet'):
                df.to_parquet(output_file, index=False)
            else:
                df.to_csv(output_file, index=False)
            print(f"üíæ Data saved to: {output_file}")
        except Exception as e:
            print(f"‚ö† Could not save as Parquet: {e}")
            output_file = 'data_processed.csv'
            df.to_csv(output_file, index=False)
            print(f"üíæ Data saved to: {output_file}")
        
        print(f"üìà Final dataset shape: {df.shape}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        missing_data = df.isnull().sum()
        if missing_data.sum() > 0:
            print(f"üîç Missing values by column:")
            print(missing_data[missing_data > 0].sort_values(ascending=False).head(10))
        else:
            print("üîç No missing values found")
        
        return df
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Ç–∏–ø–æ–≤: {e}")
        return None

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
if __name__ == "__main__":
    transform_data_types()